From c8c125b7b44450b10282e7fa74ae1874c3f2092e Mon Sep 17 00:00:00 2001
From: jose luis <josloe@gmail.com>
Date: Sun, 14 Mar 2021 01:48:25 +0100
Subject: [PATCH] Create Patch File

---
 client3.py     |  8 ++++---
 client_test.py | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+), 3 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..eb94786 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,14 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	return price_a / price_b
 
 # Main
 if __name__ == "__main__":
@@ -52,8 +52,10 @@ if __name__ == "__main__":
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		csv_prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			csv_prices[stock] = price
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+		print ("Ratio %s" % getRatio(csv_prices["ABC"], csv_prices["DEF"]))
diff --git a/client_test.py b/client_test.py
index af2bf26..46641ea 100644
--- a/client_test.py
+++ b/client_test.py
@@ -21,5 +21,65 @@ class ClientTest(unittest.TestCase):
+from logging import currentframe
+import unittest
+from client3 import getDataPoint
+
+class ClientTest(unittest.TestCase):
+  def test_getDataPoint_calculatePrice(self):
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      local_price = (quote["top_bid"]["price"] + quote["top_ask"]["price"]) / 2
+      test_price = getDataPoint(quote)[-1]
+      self.assertEqual(test_price, local_price)
+
+
+  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+    # anidado
+    for quote in quotes:
+      # varible local
+      local_isGreater = quote["top_bid"]["price"] > quote["top_ask"]["price"]
+      # pasada por funcion
+      _, test_bid_price, test_ask_price, _ = getDataPoint(quote)
+      # comprobacion del test
+      test_isGreater = test_bid_price > test_ask_price
+      # check
+      self.assertEqual(test_isGreater, local_isGreater)
+
+  """ ------------ Add more unit tests ------------ """
+  def test_getDataPoint_calculateRatio(self):
+    quotes = [
+      {'top_ask': {'price': 119.92, 'size': 107}, 'timestamp': '2020-11-17 00:11:13.274292', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 118.9, 'size': 33}, 'timestamp': '2020-11-18 07:41:41.259854', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    # variables
+    test_list_prices = {}
+    local_list_prices = {}
+
+    # loop
+    for quote in quotes:
+      # local variable calculation
+      local_price = (quote["top_bid"]["price"] + quote["top_ask"]["price"]) / 2
+      local_list_prices[quote["stock"]] = local_price
+
+      # test variable through function
+      test_stock, _, _, test_price = getDataPoint(quote)
+      test_list_prices[test_stock] = test_price
+
+    # assert between two objects
+    self.assertEqual(test_list_prices, local_list_prices)
+
+
 if __name__ == '__main__':
     unittest.main()
-- 
2.30.1.windows.1

